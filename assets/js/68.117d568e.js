(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{541:function(e,t,n){"use strict";n.r(t);var r=n(56),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"路由设置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由设置"}},[e._v("#")]),e._v(" 路由设置")]),e._v(" "),n("h2",{attrs:{id:"基本路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本路由"}},[e._v("#")]),e._v(" 基本路由")]),e._v(" "),n("h3",{attrs:{id:"基本get路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本get路由"}},[e._v("#")]),e._v(" 基本GET路由")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('beego.Get("/",func(ctx *context.Context){\n     ctx.Output.Body([]byte("hello world"))\n})\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("h3",{attrs:{id:"基本-post-路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本-post-路由"}},[e._v("#")]),e._v(" 基本 POST 路由")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('beego.Post("/alice",func(ctx *context.Context){\n     ctx.Output.Body([]byte("bob"))\n})\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("h3",{attrs:{id:"注册一个可以响应任何-http-的路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注册一个可以响应任何-http-的路由"}},[e._v("#")]),e._v(" 注册一个可以响应任何 HTTP 的路由")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('beego.Any("/foo",func(ctx *context.Context){\n     ctx.Output.Body([]byte("bar"))\n})\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("h3",{attrs:{id:"所有的支持的基础函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#所有的支持的基础函数"}},[e._v("#")]),e._v(" 所有的支持的基础函数")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("beego.Get(router, beego.FilterFunc)\nbeego.Post(router, beego.FilterFunc)\nbeego.Put(router, beego.FilterFunc)\nbeego.Patch(router, beego.FilterFunc)\nbeego.Head(router, beego.FilterFunc)\nbeego.Options(router, beego.FilterFunc)\nbeego.Delete(router, beego.FilterFunc)\nbeego.Any(router, beego.FilterFunc)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("h2",{attrs:{id:"支持自定义的-handler-实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#支持自定义的-handler-实现"}},[e._v("#")]),e._v(" 支持自定义的 handler 实现")]),e._v(" "),n("p",[e._v("有些时候我们已经实现了一些 rpc 的应用,但是想要集成到 beego 中,或者其他的 httpserver 应用,集成到 beego 中来.现在可以很方便的集成:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('s := rpc.NewServer()\ns.RegisterCodec(json.NewCodec(), "application/json")\ns.RegisterService(new(HelloService), "")\nbeego.Handler("/rpc", s)\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("beego.Handler(router, http.Handler) 这个函数是关键,第一个参数表示路由 URI, 第二个就是你自己实现的 http.Handler, 注册之后就会把所有 rpc 作为前缀的请求分发到 http.Handler 中进行处理.")]),e._v(" "),n("p",[e._v("这个函数其实还有第三个参数就是是否是前缀匹配,默认是 false, 如果设置了 true, 那么就会在路由匹配的时候前缀匹配,即 /rpc/user 这样的也会匹配去运行")]),e._v(" "),n("h3",{attrs:{id:"路由参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由参数"}},[e._v("#")]),e._v(" 路由参数")]),e._v(" "),n("p",[e._v("后面会讲到固定路由,正则路由,这些参数一样适用于上面的这些函数")]),e._v(" "),n("h2",{attrs:{id:"restful-controller-路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#restful-controller-路由"}},[e._v("#")]),e._v(" RESTful Controller 路由")]),e._v(" "),n("p",[e._v("在介绍这三种 beego 的路由实现之前先介绍 RESTful，我们知道 RESTful 是一种目前 API 开发中广泛采用的形式，beego 默认就是支持这样的请求方法，也就是用户 Get 请求就执行 Get 方法，Post 请求就执行 Post 方法。因此默认的路由是这样 RESTful 的请求方式。")]),e._v(" "),n("h3",{attrs:{id:"固定路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#固定路由"}},[e._v("#")]),e._v(" 固定路由")]),e._v(" "),n("p",[e._v("固定路由也就是全匹配的路由，如下所示：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('beego.Router("/", &controllers.MainController{})\nbeego.Router("/admin", &admin.UserController{})\nbeego.Router("/admin/index", &admin.ArticleController{})\nbeego.Router("/admin/addpkg", &admin.AddController{})\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("如上所示的路由就是我们最常用的路由方式，一个固定的路由，一个控制器，然后根据用户请求方法不同请求控制器中对应的方法，典型的 RESTful 方式。")]),e._v(" "),n("h3",{attrs:{id:"正则路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正则路由"}},[e._v("#")]),e._v(" 正则路由")]),e._v(" "),n("p",[e._v("为了用户更加方便的路由设置，beego 参考了 sinatra 的路由实现，支持多种方式的路由：")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("beego.Router(“/api/?:id”, &controllers.RController{})")])]),e._v(" "),n("p",[e._v("默认匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("beego.Router(“/api/:id”, &controllers.RController{})")])]),e._v(" "),n("p",[e._v("默认匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”，但URL”/api/“匹配失败")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("beego.Router(“/api/:id([0-9]+)“, &controllers.RController{})")])]),e._v(" "),n("p",[e._v("自定义正则匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("beego.Router(“/user/:username([\\\\w]+)“, &controllers.RController{})")])]),e._v(" "),n("p",[e._v("正则字符串匹配 //例如对于URL”/user/astaxie”可以匹配成功，此时变量”:username”值为”astaxie”")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("beego.Router(“/download/*.*”, &controllers.RController{})")])]),e._v(" "),n("p",[e._v("*匹配方式 //例如对于URL”/download/file/api.xml”可以匹配成功，此时变量”:path”值为”file/api”， “:ext”值为”xml”")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("beego.Router(“/download/ceshi/*“, &controllers.RController{})")])]),e._v(" "),n("p",[e._v("*全匹配方式 //例如对于URL”/download/ceshi/file/api.json”可以匹配成功，此时变量”:splat”值为”file/api.json”")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("beego.Router(“/:id:int”, &controllers.RController{})")])]),e._v(" "),n("p",[e._v("int 类型设置方式，匹配 :id为int 类型，框架帮你实现了正则 ([0-9]+)")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("beego.Router(“/:hi:string”, &controllers.RController{})")])]),e._v(" "),n("p",[e._v("string 类型设置方式，匹配 :hi 为 string 类型。框架帮你实现了正则 ([\\w]+)")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("beego.Router(“/cms_:id([0-9]+).html”, &controllers.CmsController{})")])]),e._v(" "),n("p",[e._v("带有前缀的自定义正则 //匹配 :id 为正则类型。匹配 cms_123.html 这样的 url :id = 123")])])]),e._v(" "),n("p",[e._v("可以在 Controller 中通过如下方式获取上面的变量：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('this.Ctx.Input.Param(":id")\nthis.Ctx.Input.Param(":username")\nthis.Ctx.Input.Param(":splat")\nthis.Ctx.Input.Param(":path")\nthis.Ctx.Input.Param(":ext")\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("h2",{attrs:{id:"自定义方法及-restful-规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义方法及-restful-规则"}},[e._v("#")]),e._v(" 自定义方法及 RESTful 规则")]),e._v(" "),n("p",[e._v("上面列举的是默认的请求方法名（请求的 method 和函数名一致，例如 GET 请求执行 Get 函数，POST 请求执行 Post 函数），如果用户期望自定义函数名，那么可以使用如下方式：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('beego.Router("/",&IndexController{},"*:Index")\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("使用第三个参数，第三个参数就是用来设置对应 method 到函数名，定义如下")]),e._v(" "),n("p",[e._v("*表示任意的 method 都执行该函数\n使用 httpmethod:funcname 格式来展示\n多个不同的格式使用 ; 分割\n多个 method 对应同一个 funcname，method 之间通过 , 来分割\n以下是一个 RESTful 的设计示例：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('beego.Router("/api/list",&RestController{},"*:ListFood")\nbeego.Router("/api/create",&RestController{},"post:CreateFood")\nbeego.Router("/api/update",&RestController{},"put:UpdateFood")\nbeego.Router("/api/delete",&RestController{},"delete:DeleteFood")\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("以下是多个 HTTP Method 指向同一个函数的示例：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('beego.Router("/api",&RestController{},"get,post:ApiFunc")\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("以下是不同的 method 对应不同的函数，通过 ; 进行分割的示例：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('beego.Router("/simple",&SimpleController{},"get:GetFunc;post:PostFunc")\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("可用的 HTTP Method：")]),e._v(" "),n("p",[e._v("*: 包含以下所有的函数\nget: GET 请求\npost: POST 请求\nput: PUT 请求\ndelete: DELETE 请求\npatch: PATCH 请求\noptions: OPTIONS 请求\nhead: HEAD 请求\n如果同时存在 * 和对应的 HTTP Method，那么优先执行 HTTP Method 的方法，例如同时注册了如下所示的路由：")]),e._v(" "),n("p",[e._v('beego.Router("/simple",&SimpleController{},"*:AllFunc;post:PostFunc")\n那么执行 POST 请求的时候，执行 PostFunc 而不执行 AllFunc。')]),e._v(" "),n("p",[e._v('自定义函数的路由默认不支持 RESTful 的方法，也就是如果你设置了 beego.Router("/api",&RestController{},"post:ApiFunc") 这样的路由，如果请求的方法是 POST，那么不会默认去执行 Post 函数。')]),e._v(" "),n("p",[e._v("自动匹配\n用户首先需要把需要路由的控制器注册到自动路由中：")]),e._v(" "),n("p",[e._v("beego.AutoRouter(&controllers.ObjectController{})\n那么 beego 就会通过反射获取该结构体中所有的实现方法，你就可以通过如下的方式访问到对应的方法中：")]),e._v(" "),n("p",[e._v("/object/login   调用 ObjectController 中的 Login 方法\n/object/logout  调用 ObjectController 中的 Logout 方法\n除了前缀两个 /:controller/:method 的匹配之外，剩下的 url beego 会帮你自动化解析为参数，保存在 this.Ctx.Input.Params 当中：")]),e._v(" "),n("p",[e._v("/object/blog/2013/09/12  调用 ObjectController 中的 Blog 方法，参数如下：map[0:2013 1:09 2:12]\n方法名在内部是保存了用户设置的，例如 Login，url 匹配的时候都会转化为小写，所以，/object/LOGIN 这样的 url 也一样可以路由到用户定义的 Login 方法中。")]),e._v(" "),n("p",[e._v("现在已经可以通过自动识别出来下面类似的所有 url，都会把请求分发到 controller 的 simple 方法：")]),e._v(" "),n("p",[e._v('/controller/simple\n/controller/simple.html\n/controller/simple.json\n/controller/simple.xml\n可以通过 this.Ctx.Input.Param(":ext") 获取后缀名。')]),e._v(" "),n("p",[e._v("注解路由\n从 beego 1.3 版本开始支持了注解路由，用户无需在 router 中注册路由，只需要 Include 相应地 controller，然后在 controller 的 method 方法上面写上 router 注释（// @router）就可以了，详细的使用请看下面的例子：")]),e._v(" "),n("p",[e._v("// CMS API\ntype CMSController struct {\nbeego.Controller\n}")]),e._v(" "),n("p",[e._v('func (c *CMSController) URLMapping() {\nc.Mapping("StaticBlock", c.StaticBlock)\nc.Mapping("AllBlock", c.AllBlock)\n}')]),e._v(" "),n("p",[e._v("// @router /staticblock/:key [get]\nfunc (this *CMSController) StaticBlock() {")]),e._v(" "),n("p",[e._v("}")]),e._v(" "),n("p",[e._v("// @router /all/:key [get]\nfunc (this *CMSController) AllBlock() {")]),e._v(" "),n("p",[e._v("}\n可以在 router.go 中通过如下方式注册路由：")]),e._v(" "),n("p",[e._v("beego.Include(&CMSController{})\nbeego 自动会进行源码分析，注意只会在 dev 模式下进行生成，生成的路由放在 “/routers/commentsRouter.go” 文件中。")]),e._v(" "),n("p",[e._v("这样上面的路由就支持了如下的路由：")]),e._v(" "),n("p",[e._v("GET /staticblock/:key\nGET /all/:key\n其实效果和自己通过 Router 函数注册是一样的：")]),e._v(" "),n("p",[e._v('beego.Router("/staticblock/:key", &CMSController{}, "get:StaticBlock")\nbeego.Router("/all/:key", &CMSController{}, "get:AllBlock")\n同时大家注意到新版本里面增加了 URLMapping 这个函数，这是新增加的函数，用户如果没有进行注册，那么就会通过反射来执行对应的函数，如果注册了就会通过 interface 来进行执行函数，性能上面会提升很多。')]),e._v(" "),n("p",[e._v('namespace\n//初始化 namespace\nns :=\nbeego.NewNamespace("/v1",\nbeego.NSCond(func(ctx *context.Context) bool {\nif ctx.Input.Domain() == "api.beego.me" {\nreturn true\n}\nreturn false\n}),\nbeego.NSBefore(auth),\nbeego.NSGet("/notallowed", func(ctx *context.Context) {\nctx.Output.Body([]byte("notAllowed"))\n}),\nbeego.NSRouter("/version", &AdminController{}, "get:ShowAPIVersion"),\nbeego.NSRouter("/changepassword", &UserController{}),\nbeego.NSNamespace("/shop",\nbeego.NSBefore(sentry),\nbeego.NSGet("/:id", func(ctx *context.Context) {\nctx.Output.Body([]byte("notAllowed"))\n}),\n),\nbeego.NSNamespace("/cms",\nbeego.NSInclude(\n&controllers.MainController{},\n&controllers.CMSController{},\n&controllers.BlockController{},\n),\n),\n)\n//注册 namespace\nbeego.AddNamespace(ns)\n上面这个代码支持了如下这样的请求 URL')]),e._v(" "),n("p",[e._v("GET /v1/notallowed\nGET /v1/version\nGET /v1/changepassword\nPOST /v1/changepassword\nGET /v1/shop/123\nGET /v1/cms/ 对应 MainController、CMSController、BlockController 中得注解路由\n而且还支持前置过滤,条件判断,无限嵌套 namespace")]),e._v(" "),n("p",[e._v("namespace 的接口如下:")]),e._v(" "),n("p",[e._v("NewNamespace(prefix string, funcs …interface{})")]),e._v(" "),n("p",[e._v("初始化 namespace 对象,下面这些函数都是 namespace 对象的方法,但是强烈推荐使用 NS 开头的相应函数注册，因为这样更容易通过 gofmt 工具看的更清楚路由的级别关系")]),e._v(" "),n("p",[e._v("NSCond(cond namespaceCond)")]),e._v(" "),n("p",[e._v("支持满足条件的就执行该 namespace, 不满足就不执行")]),e._v(" "),n("p",[e._v("NSBefore(filiterList …FilterFunc)")]),e._v(" "),n("p",[e._v("NSAfter(filiterList …FilterFunc)")]),e._v(" "),n("p",[e._v("上面分别对应 beforeRouter 和 FinishRouter 两个过滤器，可以同时注册多个过滤器")]),e._v(" "),n("p",[e._v("NSInclude(cList …ControllerInterface)")]),e._v(" "),n("p",[e._v("NSRouter(rootpath string, c ControllerInterface, mappingMethods …string)")]),e._v(" "),n("p",[e._v("NSGet(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("NSPost(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("NSDelete(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("NSPut(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("NSHead(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("NSOptions(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("NSPatch(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("NSAny(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("NSHandler(rootpath string, h http.Handler)")]),e._v(" "),n("p",[e._v("NSAutoRouter(c ControllerInterface)")]),e._v(" "),n("p",[e._v("NSAutoPrefix(prefix string, c ControllerInterface)")]),e._v(" "),n("p",[e._v("上面这些都是设置路由的函数,详细的使用和上面 beego 的对应函数是一样的")]),e._v(" "),n("p",[e._v("NSNamespace(prefix string, params …innnerNamespace)")]),e._v(" "),n("p",[e._v("嵌套其他 namespace")]),e._v(" "),n("p",[e._v('ns :=\nbeego.NewNamespace("/v1",\nbeego.NSNamespace("/shop",\nbeego.NSGet("/:id", func(ctx *context.Context) {\nctx.Output.Body([]byte("shopinfo"))\n}),\n),\nbeego.NSNamespace("/order",\nbeego.NSGet("/:id", func(ctx *context.Context) {\nctx.Output.Body([]byte("orderinfo"))\n}),\n),\nbeego.NSNamespace("/crm",\nbeego.NSGet("/:id", func(ctx *context.Context) {\nctx.Output.Body([]byte("crminfo"))\n}),\n),\n)\n下面这些函数都是属于 *Namespace 对象的方法：不建议直接使用，当然效果和上面的 NS 开头的函数是一样的，只是上面的方式更优雅，写出来的代码更容易看得懂')]),e._v(" "),n("p",[e._v("Cond(cond namespaceCond)")]),e._v(" "),n("p",[e._v("支持满足条件的就执行该 namespace, 不满足就不执行,例如你可以根据域名来控制 namespace")]),e._v(" "),n("p",[e._v("Filter(action string, filter FilterFunc)")]),e._v(" "),n("p",[e._v("action 表示你需要执行的位置, before 和 after 分别表示执行逻辑之前和执行逻辑之后的 filter")]),e._v(" "),n("p",[e._v("Router(rootpath string, c ControllerInterface, mappingMethods …string)")]),e._v(" "),n("p",[e._v("AutoRouter(c ControllerInterface)")]),e._v(" "),n("p",[e._v("AutoPrefix(prefix string, c ControllerInterface)")]),e._v(" "),n("p",[e._v("Get(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("Post(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("Delete(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("Put(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("Head(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("Options(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("Patch(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("Any(rootpath string, f FilterFunc)")]),e._v(" "),n("p",[e._v("Handler(rootpath string, h http.Handler)")]),e._v(" "),n("p",[e._v("上面这些都是设置路由的函数,详细的使用和上面 beego 的对应函数是一样的")]),e._v(" "),n("p",[e._v("Namespace(ns …*Namespace)")]),e._v(" "),n("p",[e._v("更多的例子代码：")]),e._v(" "),n("p",[e._v('//APIS\nns :=\nbeego.NewNamespace("/api",\n//此处正式版时改为验证加密请求\nbeego.NSCond(func(ctx *context.Context) bool {\nif ua := ctx.Input.Request.UserAgent(); ua != "" {\nreturn true\n}\nreturn false\n}),\nbeego.NSNamespace("/ios",\n//CRUD Create(创建)、Read(读取)、Update(更新)和Delete(删除)\nbeego.NSNamespace("/create",\n// /api/ios/create/node/\nbeego.NSRouter("/node", &apis.CreateNodeHandler{}),\n// /api/ios/create/topic/\nbeego.NSRouter("/topic", &apis.CreateTopicHandler{}),\n),\nbeego.NSNamespace("/read",\nbeego.NSRouter("/node", &apis.ReadNodeHandler{}),\nbeego.NSRouter("/topic", &apis.ReadTopicHandler{}),\n),\nbeego.NSNamespace("/update",\nbeego.NSRouter("/node", &apis.UpdateNodeHandler{}),\nbeego.NSRouter("/topic", &apis.UpdateTopicHandler{}),\n),\nbeego.NSNamespace("/delete",\nbeego.NSRouter("/node", &apis.DeleteNodeHandler{}),\nbeego.NSRouter("/topic", &apis.DeleteTopicHandler{}),\n)\n),\n)')]),e._v(" "),n("p",[e._v("beego.AddNamespace(ns)")])])}),[],!1,null,null,null);t.default=o.exports}}]);